# -*- coding: utf-8 -*-
"""gatot_submission2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MUKbqZjKDurCeiK5WzWe7LchNzXya-0U

# Muhamad Gatot Supiadin
## M183X0343 | M01 - Pengembangan Machine Learning dan Front End Web
Universitas Amikom Yogyakarta , Sleman Yogyakarta
"""

# Library 
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
import os
from os.path import join

# Library Visualisasi
import matplotlib.pyplot as plt
import seaborn as sns

# Modeling library
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""# Setting Kaggle

"""

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

"""# Import Dataset

"""

!kaggle datasets download -d stefanoleone992/filmtv-movies-dataset

!unzip '/content/filmtv-movies-dataset.zip'

movie = pd.read_csv('/content/filmtv_movies - ENG.csv')
movie.head(5)

movie.head(10)

"""# Eksploratory Data Analysis"""

def printByInformation(dataset, option=False):
  if option:
    pd.set_option('display.max_columns',None)
    print(f'current rows:{dataset.shape[0]}')
    print(f'current col:{dataset.shape[1]}')
    print('======================DATA CLEANING=======================================')
    print(f'jumlah NaN {dataset.isnull().sum().sum()} dari NaN yg ditemukan')
    print(f'jumlah NaN tiap Column\n{dataset.isnull().sum()}')
    print(f'Name Columns: {list(dataset.columns)}')
    print(f'{dataset.info()}')
    print(f'{dataset.describe()}')
printByInformation(movie,True)

"""Dataset yang saya gunakan adalah FilmTV movies dataset yang saya ambil dari Kaggle.

Dataset yang saya ambil adalah dataset publik yang berasal dari kaggle, berikut keterangan mengenai variabel didalmnya :

- filmtv_id : id film
- title : judul film
- year : tahun rilis film
- genre : genre dalam movie E.g Adventure, Horror, Thrille
- duration : durasi film
- country : asal negara film
- director : direktor film
- actors : aktor yang memerankan film
- avg_vote : rata rata vote film
- public_vote : publik vote film
- critic_vote : vote kritik pada film
- total_votes : total vote yang didapat film
- description : deksripsi film
- notes : catatan film
"""

movie.shape

movie.columns

movie = movie.drop(columns=['notes', 'critics_vote', 'description'])
movie

"""Menghapus kolom fitur yang dapat mengganggu proses modelling"""

print('This is a list of genres: ', movie.genre.unique())

"""List jumlah genre yang ada dalam dataset

# Data Cleaning
Pengecekan missing value
"""

null_features = movie.columns[movie.isna().any()]
movie[null_features].isna().sum()

print('Jumlah data yang null adalah ', movie.isnull().sum().sum(), ' records')

"""Ternyata setelah dijumlahkan missing value pada dataset sebanyak entries"""

movie.dropna(inplace=True)
movie[null_features].isna().sum()

print('Jumlah data yang null adalah ', movie.isnull().sum().sum(), ' records')

"""Setelah clean dataset akan terlihat seperti diatas, dengan memilih untuk drop dataset yang memiliki missing value.

# Data preprocessing
"""

plt.figure(figsize=(15,15))
sns.countplot(y=movie['genre'])
plt.show()

"""pada Gambar terlihat bahwa genre drama dan comedy merupakan genre yang sering ditonton dibanding genre yang lain."""

plt.figure(figsize=(15,15))
sns.countplot(y=movie['year'])
plt.show()

"""pada Gambar terlihat bahwa semakin tahun produksi film semakin meningkat cukup pesat, dengan adanya teknologi khusus tahun demi tahun film menjadi bagian penting dalam peradaban."""

movie.drop_duplicates(subset='title',inplace=True)

"""Drop semua title yang duplikast terhadap yang lain, sehingga data tidak ada yang duplikat

# Modelling
"""

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data genre
tf.fit(movie['genre']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

# Melakukan fit lalu ditransformasikan ke dalam bentuk matrix
tfidf_matrix = tf.fit_transform(movie['genre']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=movie.title
).sample(22, axis=1).sample(10, axis=0)

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa title movie
cosine_sim_df = pd.DataFrame(cosine_sim, index=movie['title'], columns=movie['title'])
print('Shape:', cosine_sim_df.shape)
 
# Melihat similarity matrix pada setiap movie
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

def movie_recom(movie_name, similarity_data=cosine_sim_df, items=movie[['title', 'year', 'genre', 'year', 'public_vote']], k=5):

    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,movie_name].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar/tertinggi dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop title movie agar title yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(movie_name, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

"""Melakukan percobaa dengan memasukkan beberapa title movie dan mari kita lihat rekomendasi film yang diberikan sistem"""

movie[movie['title'] == 'Diner']

movie_recom('Diner')

movie[movie['title'] == 'Dead-Bang']

movie_recom('Dead-Bang')

"""Dari beberapa contoh rekomendasi diatas, sistem memberikan kita reokmendasi dari film film yang berkaitan dengan genre user, dan berjalan dengan sangat baik."""